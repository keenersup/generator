{"version":3,"sources":["../src/index.js"],"names":["typeDefs","gql","books","title","author","resolvers","Query","server","ApolloServer","cors","credentials","playground","IN_PROD","settings","context","req","listen","port","process","env","SERVER_PORT","then","url","console","log"],"mappings":";;AAAA;;AACA;;AAEA;AACA;AACA;AACA,MAAMA,QAAQ,GAAGC,iBAAI;;;;;;;;;;;;;;;CAArB;AAgBA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,yCADT;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADY,EAKZ;AACED,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALY,CAAd,C,CAUA;AACA;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,KAAK,EAAE,MAAMA;AADR;AADS,CAAlB,C,CAMA;AACA;;AACA,MAAMK,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,IAAI,EAAE;AACJ;AACAC,IAAAA,WAAW,EAAE;AAFT,GADwB;AAK9BV,EAAAA,QAL8B;AAM9BK,EAAAA,SAN8B;AAO9B;AACAM,EAAAA,UAAU,EAAEC,kBAAU,KAAV,GAAkB;AAC5BC,IAAAA,QAAQ,EAAE;AACR,6BAAuB;AADf;AADkB,GARA;AAa9BC,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAmB;AAC1B;AACA,WAAO;AACLA,MAAAA,GADK,CAEL;AACA;;AAHK,KAAP;AAKD;AApB6B,CAAjB,CAAf,C,CAuBA;AAGA;;AACAR,MAAM,CAACS,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAApB,CAAd,EAAiDC,IAAjD,CAAsD,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AACjEC,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBF,GAAI,EAAvC;AACD,CAFD","sourcesContent":["import { ApolloServer, gql } from'apollo-server'\nimport {IN_PROD} from \"./config\";\n\n// A schema is a collection of type definitions (hence \"typeDefs\")\n// that together define the \"shape\" of queries that are executed against\n// your data.\nconst typeDefs = gql`\n    # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n    # This \"Book\" type defines the queryable fields for every book in our data source.\n    type Book {\n        title: String\n        author: String\n    }\n\n    # The \"Query\" type is special: it lists all of the available queries that\n    # clients can execute, along with the return type for each. In this\n    # case, the \"books\" query returns an array of zero or more Books (defined above).\n    type Query {\n        books: [Book]\n    }\n`;\nconst books = [\n  {\n    title: 'Harry Potter and the Chamber of Secrets',\n    author: 'J.K. Rowling',\n  },\n  {\n    title: 'Jurassic Park',\n    author: 'Michael Crichton',\n  },\n]\n// Resolvers define the technique for fetching the types defined in the\n// schema. This resolver retrieves books from the \"books\" array above.\n\nconst resolvers = {\n  Query: {\n    books: () => books,\n  },\n}\n\n// The ApolloServer constructor requires two parameters: your schema\n// definition and your set of resolvers.\nconst server = new ApolloServer({\n  cors: {\n    // origin: `${REACT_CLIENT_ADDRESS}:${REACT_CLIENT_PORT}`,\n    credentials: true,\n  },\n  typeDefs,\n  resolvers,\n  // schemaDirectives,\n  playground: IN_PROD ? false : {\n    settings: {\n      'request.credentials': 'include',\n    }\n  },\n  context: async ({ req }) => {\n    // const user = await addUser(req) || ''\n    return {\n      req,\n      // models,\n      // user,\n    }\n  }\n})\n\n// const server = new ApolloServer({ typeDefs, resolvers });\n\n\n// The `listen` method launches a web server.\nserver.listen({ port: process.env.SERVER_PORT }).then(({ url }) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n});"],"file":"index.js"}