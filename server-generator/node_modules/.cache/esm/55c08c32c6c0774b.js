let ApolloServer,path,mergeResolvers,mergeTypes,fileLoader,schemaDirectives,dbConnect,models,IN_PROD;_c6c‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_c6c‍.w("path",[["default",["path"],function(v){path=v}]]);_c6c‍.w("merge-graphql-schemas",[["mergeResolvers",["mergeResolvers"],function(v){mergeResolvers=v}],["mergeTypes",["mergeTypes"],function(v){mergeTypes=v}],["fileLoader",["fileLoader"],function(v){fileLoader=v}]]);_c6c‍.w("./directives",[["schemaDirectives",["schemaDirectives"],function(v){schemaDirectives=v}]]);_c6c‍.w("./utils/dbConnect",[["dbConnect",["dbConnect"],function(v){dbConnect=v}]]);_c6c‍.w("./models",[["models",["models"],function(v){models=v}]]);_c6c‍.w("./config",[["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}]]);









(() => {
  const typeDefs = mergeTypes(fileLoader(path.join(__dirname, './typeDefs')))
  const resolvers = mergeResolvers(fileLoader(path.join(__dirname, './resolvers')))

  const server = new ApolloServer({
/*
    cors: {
      origin: `${REACT_CLIENT_ADDRESS}:${REACT_CLIENT_PORT}`,
      credentials: true,
    },
*/
    typeDefs,
    resolvers,
    schemaDirectives,
    playground: IN_PROD ? false : {
      settings: {
        'request.credentials': 'include',
      }
    },
    context: async ({ req }) => {
      // const user = await addUser(req) || ''
      return {
        req,
        models,
        // user,
      }
    }
  })

  try {
    server.listen({ port: process.env.SERVER_PORT }).then(({ url }) => {
      console.log(`🚀  Server ready at ${url}`)
    })
    dbConnect()
  } catch (err) {
    console.error(`server error: ${err}`)
  }
})()
